{"version":3,"file":"testssl.min.js","sources":["../src/testssl.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n// Project implemented by the \"Recovery, Transformation and Resilience Plan.\n// Funded by the European Union - Next GenerationEU\".\n//\n// Produced by the UNIMOODLE University Group: Universities of\n// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,\n// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,\n// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos..\n\n/**\n *\n * @module    mod_kuet/testssl\n * @copyright  2023 Proyecto UNIMOODLE {@link https://unimoodle.github.io}\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     3IPUNT <contacte@tresipunt.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/str', 'core/notification', 'mod_kuet/encryptor'], function($, str, notification, Encryptor) {\n    \"use strict\";\n\n    let socketUrl = '';\n    let portUrl = '8080';\n    let secureProtocol = false;\n    let concatenateOnClose = false;\n\n    /** @type {jQuery} The jQuery node for the page region. */\n    TestSockets.prototype.root = null;\n\n    let protocolCell = null;\n    let protocolExtraInfoCell = null;\n\n    let sslCell = null;\n    let sslExtraInfoCell = null;\n\n    let connectionCell = null;\n    let connectionExtraInfoCell = null;\n\n    let sendmessageCell = null;\n    let sendmessageExtraInfoCell = null;\n\n    let receivemessageCell = null;\n    let receivemessageExtraInfoCell = null;\n\n    /**\n     * @constructor\n     * @param {String} region\n     * @param {String} socketurl\n     * @param {String} port\n     */\n    function TestSockets(region, socketurl, port) {\n        this.root = $(region);\n        socketUrl = socketurl;\n        portUrl = port;\n        protocolCell = this.root.find('#protocol-test-result');\n        protocolExtraInfoCell = this.root.find('#protocol-test-extra-info');\n        sslCell = this.root.find('#ssl-test-result');\n        sslExtraInfoCell = this.root.find('#ssl-test-extra-info');\n        connectionCell = this.root.find('#open-connection-test-result');\n        connectionExtraInfoCell = this.root.find('#open-connection-test-extra-info');\n        sendmessageCell = this.root.find('#send-message-test-result');\n        sendmessageExtraInfoCell = this.root.find('#send-message-test-extra-info');\n        receivemessageCell = this.root.find('#receive-message-test-result');\n        receivemessageExtraInfoCell = this.root.find('#receive-message-test-extra-info');\n\n        this.initTestSockets();\n    }\n\n    TestSockets.prototype.setValid = function(element, clean = true) {\n        if (clean === true) {\n            TestSockets.prototype.cleanAllChilds(element);\n        }\n        element.append('<i class=\"icon fa fa-check text-success fa-fw \" aria-hidden=\"true\"></i>');\n    };\n\n    TestSockets.prototype.setWarning = function(element, clean = true) {\n        if (clean === true) {\n            TestSockets.prototype.cleanAllChilds(element);\n        }\n        element.append('<i class=\"icon fa fa-warning text-warning fa-fw \" aria-hidden=\"true\"></i>');\n    };\n\n    TestSockets.prototype.setError = function(element, clean = true) {\n        if (clean === true) {\n            TestSockets.prototype.cleanAllChilds(element);\n        }\n        element.append('<i class=\"icon fa fa-times text-danger fa-fw \" aria-hidden=\"true\"></i>');\n    };\n\n    TestSockets.prototype.setExtraInfo = function(element, msg, clean = true) {\n        if (clean === true) {\n            TestSockets.prototype.cleanAllChilds(element);\n        }\n        element.append('<span>' + msg + '</span>');\n    };\n\n    TestSockets.prototype.cleanAllChilds = function(element) {\n        if (element && element.length === 1) {\n            let el = element[0];\n            el.childNodes.forEach(child => {\n                el.removeChild(child);\n            });\n        }\n    };\n\n    TestSockets.prototype.normalizeSocketUrl = function(socketUrl, port) {\n        let jsUrl = new URL(socketUrl);\n\n        if (jsUrl.pathname === '/') {\n            jsUrl.pathname = jsUrl.pathname + 'testkuet';\n        } else {\n            jsUrl.pathname = jsUrl.pathname + '/testkuet';\n        }\n\n        jsUrl.port = port;\n\n        if (jsUrl.protocol === 'https:') {\n            jsUrl.protocol = 'wss:';\n            secureProtocol = true;\n            TestSockets.prototype.setValid(protocolCell);\n            return jsUrl.toString();\n        } else if (jsUrl.protocol === 'http:') {\n            jsUrl.protocol = 'ws:';\n            TestSockets.prototype.setWarning(protocolCell);\n            str.get_strings([\n                {key: 'httpsrecommended', component: 'mod_kuet'}\n            ]).done(function(strings) {\n                TestSockets.prototype.setExtraInfo(protocolExtraInfoCell, strings[0]);\n            }).fail(notification.exception);\n            return jsUrl.toString();\n        }\n\n        TestSockets.prototype.setError(protocolCell);\n        str.get_strings([\n            {key: 'protocolnotvalid', component: 'mod_kuet'}\n        ]).done(function(strings) {\n            TestSockets.prototype.setExtraInfo(protocolExtraInfoCell, strings[0]);\n        }).fail(notification.exception);\n        return '';\n    };\n\n    TestSockets.prototype.initTestSockets = function() {\n        let normalizeSocketUrl = TestSockets.prototype.normalizeSocketUrl(socketUrl, portUrl);\n        TestSockets.prototype.webSocket = new WebSocket(normalizeSocketUrl);\n\n        if (TestSockets.prototype.webSocket !== null) {\n            TestSockets.prototype.webSocket.onopen = function() {\n                TestSockets.prototype.setValid(connectionCell);\n                if (secureProtocol === true) {\n                    TestSockets.prototype.setValid(sslCell);\n                    str.get_strings([\n                        {key: 'validcertificates', component: 'mod_kuet'},\n                        {key: 'validopenconnection', component: 'mod_kuet'}\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(sslExtraInfoCell, strings[0]);\n                        TestSockets.prototype.setExtraInfo(connectionExtraInfoCell, strings[1]);\n                    }).fail(notification.exception);\n                } else {\n                    TestSockets.prototype.setWarning(sslCell);\n                    str.get_strings([\n                        {key: 'userconnectionsonrisk', component: 'mod_kuet'},\n                        {key: 'validopenconnection', component: 'mod_kuet'}\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(sslExtraInfoCell, strings[0]);\n                        TestSockets.prototype.setExtraInfo(connectionExtraInfoCell, strings[1]);\n                    }).fail(notification.exception);\n                }\n                TestSockets.prototype.sendMessageSocket('ping');\n            };\n\n            TestSockets.prototype.webSocket.onerror = function(event) {\n                // eslint-disable-next-line no-console\n                console.log(event);\n                TestSockets.prototype.setError(sslCell);\n                if (secureProtocol === true) {\n                    str.get_strings([\n                        {key: 'invalidcertificates', component: 'mod_kuet'}\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(sslExtraInfoCell, strings[0] + ' ' + event.reason);\n                        TestSockets.prototype.setExtraInfo(connectionExtraInfoCell, strings[0]);\n                    }).fail(notification.exception);\n                } else {\n                    str.get_strings([\n                        {key: 'notusecertificates', component: 'mod_kuet'},\n                        {key: 'invalidconnection', component: 'mod_kuet'},\n                        {key: 'notmakeaconnection', component: 'mod_kuet'},\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(sslExtraInfoCell, strings[0]);\n                        let messageError = '';\n                        if (event && event.target && event.target.readyState === 3) {\n                            messageError += ' ' + strings[2];\n                            concatenateOnClose = true;\n                        }\n                        TestSockets.prototype.setExtraInfo(connectionExtraInfoCell, strings[1] + messageError);\n                    }).fail(notification.exception);\n                    // Update the rest of tests.\n                    TestSockets.prototype.setError(sendmessageCell);\n                    TestSockets.prototype.setError(receivemessageCell);\n                    str.get_strings([\n                        {key: 'generictesterror', component: 'mod_kuet'}\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(sendmessageExtraInfoCell, strings[0]);\n                        TestSockets.prototype.setExtraInfo(receivemessageExtraInfoCell, strings[0]);\n                    }).fail(notification.exception);\n                }\n            };\n\n            TestSockets.prototype.webSocket.onclose = function(event) {\n                TestSockets.prototype.setError(connectionCell);\n                str.get_strings([\n                    {key: 'connectionclosed', component: 'mod_kuet'}\n                ]).done(function(strings) {\n                    TestSockets.prototype.setExtraInfo(\n                        connectionExtraInfoCell,\n                        strings[0] + ' ' + event.reason, concatenateOnClose\n                    );\n                    if (concatenateOnClose === true) {\n                        concatenateOnClose = false;\n                    }\n                }).fail(notification.exception);\n            };\n\n            TestSockets.prototype.webSocket.onmessage = function(event) {\n                if (event.data) {\n                    TestSockets.prototype.setValid(receivemessageCell);\n                    let msgDecrypt = Encryptor.decrypt(event.data);\n                    let response = JSON.parse(msgDecrypt); // PHP sends Json data.\n                    let resAction = response.action; // Message type.\n                    let user = response.usersocketid;\n\n                    if (resAction === 'connect' && user !== undefined) {\n                        str.get_strings([\n                            {key: 'validreceivedtest', component: 'mod_kuet'}\n                        ]).done(function(strings) {\n                            TestSockets.prototype.setExtraInfo(receivemessageExtraInfoCell, strings[0]);\n                        }).fail(notification.exception);\n                    } else {\n                        TestSockets.prototype.setWarning(receivemessageCell);\n                        str.get_strings([\n                            {key: 'invalidreceivedtest', component: 'mod_kuet'}\n                        ]).done(function(strings) {\n                            let err = ' Expected: Action => connect; user => value, and we received: ' + ' Action: '\n                            + resAction + ' & user: ' + user;\n                            TestSockets.prototype.setExtraInfo(receivemessageExtraInfoCell, strings[0] + err);\n                        }).fail(notification.exception);\n                    }\n                } else {\n                    TestSockets.prototype.setError(receivemessageCell);\n                    str.get_strings([\n                        {key: 'nodatareceivedtest', component: 'mod_kuet'}\n                    ]).done(function(strings) {\n                        TestSockets.prototype.setExtraInfo(receivemessageExtraInfoCell, strings[0]);\n                    }).fail(notification.exception);\n                }\n            };\n        }\n    };\n\n    TestSockets.prototype.sendMessageSocket = function(msg) {\n        try {\n            this.webSocket.send(msg);\n            TestSockets.prototype.setValid(sendmessageCell);\n            str.get_strings([\n                {key: 'validsendedtest', component: 'mod_kuet'}\n            ]).done(function(strings) {\n                TestSockets.prototype.setExtraInfo(sendmessageExtraInfoCell, strings[0]);\n            }).fail(notification.exception);\n        } catch(error) {\n            TestSockets.prototype.setError(sendmessageCell);\n            str.get_strings([\n                {key: 'invalidsendedtest', component: 'mod_kuet'}\n            ]).done(function(strings) {\n                TestSockets.prototype.setExtraInfo(sendmessageExtraInfoCell, strings[0]);\n            }).fail(notification.exception);\n        }\n    };\n\n    return {\n        /**\n         * @param {String} region\n         * @param {String} socketurl\n         * @param {String} port\n         * @return {TestSockets}\n         */\n        initTestSockets: function(region, socketurl, port) {\n            return new TestSockets(region, socketurl, port);\n        },\n    };\n});\n"],"names":["define","$","str","notification","Encryptor","socketUrl","portUrl","secureProtocol","concatenateOnClose","TestSockets","prototype","root","protocolCell","protocolExtraInfoCell","sslCell","sslExtraInfoCell","connectionCell","connectionExtraInfoCell","sendmessageCell","sendmessageExtraInfoCell","receivemessageCell","receivemessageExtraInfoCell","region","socketurl","port","this","find","initTestSockets","setValid","element","clean","cleanAllChilds","append","setWarning","setError","setExtraInfo","msg","length","el","childNodes","forEach","child","removeChild","normalizeSocketUrl","jsUrl","URL","pathname","protocol","toString","get_strings","key","component","done","strings","fail","exception","webSocket","WebSocket","onopen","sendMessageSocket","onerror","event","console","log","reason","messageError","target","readyState","onclose","onmessage","data","msgDecrypt","decrypt","response","JSON","parse","resAction","action","user","usersocketid","undefined","err","send","error"],"mappings":"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"}